#!/bin/bash

# This script sets the statusbar with the xsetroot command at the end. Have it
# started by ~/.xinitrc or ~/.xprofile.

# Handle SIGTRAP signals sent by refbar to update the status bar immediately.
trap 'update' 1

# Set the deliminter character.
delim="|"

# testweather checks to see if the most recent forecast is up to date.  If it
# isn't, it downloads a new weather forecast, then signals to update the
# statusbar. Gets weather report from wttr.in.
testweather() { \
	[ "$(stat -c %y "$HOME/.local/share/weatherreport" 2>/dev/null | cut -d' ' -f1)" != "$(date '+%Y-%m-%d')" ] &&
		ping -q -c 1 1.1.1.1 >/dev/null &&
		curl -s "wttr.in/$location" > "$HOME/.local/share/weatherreport" &&
		notify-send "ðŸŒž Weather" "New weather forecast for today." &&
		refbar
		}

# Here is the (big) function that outputs the appearance of the statusbar. It
# can really be broken down into many submodules which I've commented and
# explained.
status() { \
	echo "^c#ddaaaa^"

	# Get current mpd track filename or artist - title if possible.
	mpc -f "[[%artist% - ]%title%]|[%file%]" 2>/dev/null | grep -v "volume:" | head -n 1 && echo "$delim"

	# If the weather report is current, show daily precipitation chance,
	# low and high.  Don't even bother to understand this one unless you
	# have all day. Takes the weather report format from wttr.in and makes
	# it look like how I want it for the status bar.
	# [ "$(stat -c %y "$HOME/.local/share/weatherreport" 2>/dev/null | cut -d' ' -f1)" = "$(date '+%Y-%m-%d')" ] &&
	#    sed '16q;d' "$HOME/.local/share/weatherreport" | grep -wo "[0-9]*%" | sort -n | sed -e '$!d' | sed -e "s/^/rain /g" | tr -d '\n' &&
	#    echo ", "
#		sed '13q;d' "$HOME/.local/share/weatherreport" | grep -o "m\\(-\\)*[0-9]\\+" | sort -n -t 'm' -k 2n | sed -e 1b -e '$!d' | tr '\n|m' ' ' | awk '{print $1 "Â° -",$2 "Â°"}' &&
	#	echo "$delim"
	[ "$(stat -c %y "$HOME/.local/share/weatherreport" 2>/dev/null | cut -d' ' -f1)" = "$(date '+%Y-%m-%d')" ] &&
	    sed '16q;d' "$HOME/.local/share/weatherreport" | grep -wo "[0-9]*%" | sort -n | sed -e '$!d' | sed -e "s/^/rain /g" | tr -d '\n' &&
	    echo ", "
	sed '13q;d' "$HOME/.local/share/weatherreport" | grep -o "m\\(-\\)*[0-9]\\+" | sort -n -t 'm' -k 2n | sed -e 1b -e '$!d' | tr '\n|m' ' ' | awk '{print $1 "Â°-"$2"Â°"}' &&
	    echo "$delim"	

	cpu=$(echo $(echo "scale=2;`cat /proc/cpuinfo | grep "^[c]pu MHz" | awk '{print $4}' | sort -n | sed -n '$p' | sed 's/\..*//'` / 1000" | bc -l) | sed 's/^\./0\./')
	if [[ "$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)" == "powersave" ]]; then
	    echo "^c#00aa10^$cpu GHz^c#ddaaaa^$delim"
	else
	    echo "^c#aaaa10^$cpu GHz^c#ddaaaa^$delim"
	fi

	sensors | grep Core | field 3 | sed 's/\.0//g;s/^.//' | sort -n | tail -n 1
	echo "$delim"

	a=$(cat /proc/meminfo)
	echo "mem "
	hbar $(echo "100 - `echo $a | awk '{print $8}'` / `echo $a | awk '{print $2}'` * 100" | bc -l | sed 's/\..*//')
	echo "$delim"

	# Get the volume of ALSA's master volume output.  Show an icon if or
	# not muted.
	echo "vol "
	amixer_vol=$(amixer get Master | grep -o "[0-9]*%\|\[on\]\|\[off\]")
       	echo $amixer_vol | awk '{print $2}' | sed "s/\[on\]/^c#00aa10^/;s/\[off\]/^c#aa0010^/"
	hbar `echo $amixer_vol | awk '{print $1}' | sed "s/%//"`
	echo "$delim"

	echo "bri "
	bri=$(cat /sys/class/backlight/intel_backlight/brightness)
	if [ "$bri" -le 10 ]; then
		echo "$bri"
	else
		hbar $(($bri / 12))
	fi
	echo "$delim"

	fan=$(sensors | grep fan1 | field 2)
	if [ -f "/tmp/fanspin" ]; then
		echo "^c#aaaa10^$fan^c#ddaaaa^"
	else
		echo "^c#00aa10^$fan^c#ddaaaa^"
	fi
	echo "$delim"
	
	[[ -f "/tmp/weather" ]] || curl wttr.in > ~/.local/share/weatherreport && touch /tmp/weather && updatetimezone & 

	# Wifi quality percentage and ï‚¬ icon if ethernet is connected.
	if [[ $(grep "^\s*w" /proc/net/wireless) ]]; then
	    echo "net "
	    hbar `grep "^\s*w" /proc/net/wireless | awk '{ print int($3 * 100 / 70) }'`
	    sed "s/down//;s/up/ï‚¬/" /sys/class/net/e*/operstate
	    echo "$delim"
	fi

	# Will show all batteries with approximate icon for remaining power.
	case "$(cat /sys/class/power_supply/BAT1/status)" in
		"Discharging") 	echo "^c#aa0010^d^c#ddaaaa^";;
		"Charging")	echo "^c#00aa10^c^c#ddaaaa^";;
		"Unknown")	echo "^c#00aa10^c^c#ddaaaa^";;
	esac
	for x in /sys/class/power_supply/BAT?/capacity;
	do
	x=$(cat $x)
	case "$x" in
		100|9[0-9])	color="#00dd10" ;;
		8[0-9]|7[0-9])  color="#88dd10" ;;
		6[0-9]|5[0-9])	color="#dddd10" ;;
		4[0-9]|3[0-9])	color="#dd8810" ;;
		*)		color="#dd0010" ;;
	esac
	echo " ^r0,4,50,22^^c#000000^^r2,6,46,18^^c$color^^r2,6,`~/.scripts/percentage_of $x 46`,18^^f50^^c#ddaaaa^^r1,10,3,10^^f4^"
	done && echo "$delim"

	# Date and time.
	date '+%a %F %T'
	echo " "
	TZ='Europe/Berlin' date '+%H:%M'
	}

hbar() { \
	height=$(( 22 - $(~/.scripts/percentage_of $1 22)))
	echo "^r0,4,10,22^^c#222220^^r0,4,10,$height^^f10^"
	echo "^c#ddaaaa^"
}

update() { \
	# So all that big status function was just a command that quicking gets
	# what we want to be the statusbar. This xsetroot command is what sets
	# it. Note that the tr command replaces newlines with spaces. This is
	# to prevent some weird issues that cause significant slowing of
	# everything in dwm. Note entirely sure of the cause, but again, the tr
	# command easily avoids it.
	xsetroot -name "$(status | tr -d '\n' )" &
    wait

	# Check to see if new weather report is needed.
	#testweather &
    wait
    }


while :; do
    update
	# Sleep for a minute after changing the status bar before updating it
	# again. We run sleep in the background and use wait until it finishes,
    # because traps can interrupt wait immediately, but they can't do that
    # with sleep.
	sleep 1 &
    wait
done
